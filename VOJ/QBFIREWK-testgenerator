//// ngmq
//// Generate tests for QBFIREWK
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cstring>
#include <string>
#include <vector>
#include <sstream>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <cstdlib>
// #include <climits>
// #include <functional>
#include <ctime>
#include <cmath>
#include <bitset>
// #include <utility>
#include <complex>
#include<fstream>
#include <cassert>

using namespace std;
typedef long long ll;
typedef unsigned long long ull;
#define inf (1e9 + 1e9)
#define linf 1e18
#define BASE 1000000
#define EPS 1e-10
#define PI acos(-1)
#define pii pair<int,int>
#define vi vector<int>
#define fi first
#define se second
#define ALL(x) (x).begin(), (x).end()
#define ms(x,val) memset(x, val, sizeof(x))
#define pb(x) push_back(x)
#define make_unique(x) sort(ALL(x)) ; x.erase( unique(ALL(x)), x.end()) ;
#define dbg(x) do { cout << #x << " = " << x << endl; } while(0)
#define mp(x, y) make_pair(x, y)

/*** IMPLEMENTATION ***/
bool exitInput = false;
int ntest = 1, itest = 1 ;

const int dx[4] =
{
    1, 0, -1, 0
};
const int dy[4] =
{
    0, 1, 0, -1
};
// const int dx[8] = {-2, -1, -1, +0, +0, +1, +1, +2};
// const int dy[8] = {+0, -1, +1, -2, +2, -1, +1, +0};

/** Knight Move **/
// const int dx[8] = {+1, +2, +2, +1, -1, -2, -2, -1};
// const int dy[8] = {+2, +1, -1, -2, -2, -1, +1, +2};

const char * directions[4] =
{
    "NE", "SE", "Sw", "Nw"
};

const ll Mod = (ll)(1e8 + 7);
const int maxn = 100000 + 5;
const int maxv = 5000 + 5;
const int maxe = 1000011 + 5;

int n, N, m, K, C;
int A[66], a[66];

int lyn(int d)
{
	int p = 1;
	for(int i = 2; i <= d; ++i)
	{
		if(a[i] > a[i-p])
			p = i;
		else if(a[i] < a[i-p])
			return p;
	}
	return p;
}

bool isnecklace(int d)
{
	int p = 1;
	for(int i = 2; i <= d; ++i)
	{
		if(a[i] > a[i-p])
			p = i;
		else if(a[i] < a[i-p])
			return false;
	}
	return (d % p == 0);
}

bool isfirework(int d)
{
	for(int i = 1; i <= d; ++i)
	{
		if(a[i] < 1 || a[i] > m)
			return false;
		if( abs(a[i] - a[1 + (i%d)]) != 1 )
			return false;
	}
	return true;
}

bool isfireworkID(int d)
{
	return isfirework(d) && isnecklace(d);
}

void largestfw(int d)
{
	for(int i = 1; i <= d; ++i)
		a[i] = A[i];
	if(isfireworkID(d))
		return;
	if(a[d] > a[1] + 1)
	{
		a[d] = a[1] + 1;
		if(isfireworkID(d))
			return;
	}
	int Z = d-1;
	while(Z >= 3)
	{
		for(int i = 1; i <= d; ++i)
			a[i] = A[i];
		if( a[Z] > a[Z-1] && a[Z] >= a[1] + 2 )
		{
			// has enough to get to a[1]+1 at d?
			if( (a[Z]-2) - (a[1] + 1) <= d - Z)
			{
				a[Z] -= 2;
				a[d] = a[1] + 1;
				for(int j = Z+1; j <= d-1; ++j)
				{
					if( a[j-1] + 1 <= m && a[j-1] + 1 - (a[1] + 1) <= d - j )
					{
						a[j] = a[j-1] + 1;
					}
					else
					{
						a[j] = a[j-1] - 1;
					}
				}
			}
		}
		if(isfireworkID(d))
			return;
		--Z;
	}
	//cout << "FAILED at d = " << d << endl;
	//assert(false);
}

int main()
{
#ifdef HOME
    //freopen("input.txt", "r", stdin);
    freopen("input.txt", "w", stdout);
#endif

    srand(time(NULL));
    //srand(0);

    ntest = 200;
	//cout << ntest << endl;
    while(ntest--)
    {
        n = rand() % 30 + 1; // [0,29] -> [1, 30]
		m = rand() % 31 + 2; // [0,30] -> [2,32]
		K = rand() % 3; // [0, 2]
		C = rand() % m + 1; // [1, m]
		
		cout << n << ' ' << m << ' ' << K << ' ' << C << endl;
		N = n + n;
		A[1] = rand() % (m-1) + 1; // [1, m-1]
		A[2] = A[N] = A[1] + 1;
		int nplus = (N-2)/2, nminus = (N-2)/2;
		for(int i = 3; i < N; ++i)
		{
			if(A[i-1] == m || nplus == 0) 
			{
				A[i] = A[i-1]-1;
				nminus--;
			}
			else if(A[i-1] == A[1] || nminus == 0)
			{
				A[i] = A[i-1] + 1;
				nplus--;
			}
			else 
			{
				int r = rand() % 2;
				if(r)
				{
					A[i] = A[i-1] + 1;
					nplus--;
				}
				else
				{
					A[i] = A[i-1]-1;
					nminus--;
				}
			}
		}
		largestfw(N);
		if( !isfireworkID(N) )
		{
			cout << "FAILED" << endl;
		}
		for(int i = 1; i <= N; ++i)
			cout << a[i] << ' ';
		cout << endl;
    }


    return 0;
}
